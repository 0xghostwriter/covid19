{% set langFilePostfix = tags | langFilePostfix %}
{% if langFilePostfix === "" %}
  {% set langIncludeFolder="../wordpress-posts/" %}
{% else %}
  {% set langIncludeFolder="../translated-posts/" %}
{% endif %}

{% set lastStatDate = 1|_statsdata_ + "-" + 2|_statsdata_ %}


<!DOCTYPE html>
<html {{ tags | htmllangattributes | safe }}>
  <head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <meta name="description" content="{{ meta | safe }}"/>
    <meta name="author" content="{{ author | safe }}"/>
    <meta
      name="keywords"
      content="covid-19 california, covid-19 ca, covid-19 volunteer, covid-19 testing, covid-19 testing costs, covid-19 testing california, covid-19 toolkit, stay home save lives, california health corps, covid-19 immigrants, covid-19 financial help, covid-19 medi-cal, covid-19 healthcare, covid-19 alerts"
/>
    <title>{{ title | safe }}</title>

    <!-- combined social media meta -->
    <meta content="{{ title | safe }}" property="og:title"/>
    <meta
      content="{{ meta | safe }}"
      property="og:description"
/>
    <meta
      content="https://covid19.ca.gov/img/awareness/caforall_covid_endcards_v4_english.jpg"
      property="og:image"
/>
    <meta content="https://covid19.ca.gov/" property="og:url"/>
    <meta name="twitter:card" content="summary_large_image"/>
    <link rel="preconnect" href="https://www.google-analytics.com/">
    <link href="https://covid19.ca.gov{{ page.url }}" rel="canonical">

    {% include "favicons.njk" %}
    <link rel="manifest" href="/img/manifest.json"/>
    <meta name="msapplication-tilecolor" content="#ffffff"/>
    <meta name="msapplication-tileimage" content="img/ms-icon-144x144.png"/>
    <meta name="theme-color" content="#ffffff"/>
    {% for item in page | getAltPageRows -%}
      <link rel="alternate" hreflang="{{item.langcode}}" href="https://covid19.ca.gov{{item.url}}">
    {%- endfor %}
    {% set css %}
    {% include "built.css" %}
    {% endset %}
    <style>
      {{css | cssmin | safe}}
    </style>
  </head>
  <body>
    {% include "header.njk" %}
    <main id="main">
      <div class="container-fluid jumbotron jumbo-img inverse-hyperlink mb-0 pt-5 pb-5">
        <div class="container">
          <div class="row">
            <div class="col text-center">
              {% include  langIncludeFolder + "home-header" + langFilePostfix + ".html" %}
            </div>
          </div>
        </div>
        {% include "../wordpress-posts/stats" + langFilePostfix + ".html" %}
      </div>
    </div>
  </div>
  <div class="container-fluid pb-3 pt-3 bg-secondary-covid mb-3">
    <div class="container">
      <div class="col-md-12 row alert-left js-disclaimer ml-0 mb-0 pb-0 mt-0">
        {% if langFilePostfix === "" %}
          {% include "../wordpress-posts/new" + langFilePostfix + ".html" %}
        {% else %}
          {% include "../translated-posts/new" + langFilePostfix + ".html" %}
        {% endif %}
      </div>
    </div>
  </div>

  <!-- begin video test -->

  <div class="container-fluid bg-primary text-white py-5">
    <div class="container video-item" data-id="qQNBSlWJhfU">
    <div class="row flex-md-nowrap align-items-center">
  
        <a class="video-modal-open video-thumb-link w-100 w-lg-40" data-video="1zDX9PXkotA" href="javascript:void(0);">
          <figure class="video-thumb-photo">
            <div class="video-thumb-play-button">
              <svg class="video-thumb-play-button-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><path d="M43.3,25L0,50V0L43.3,25z"></path></svg>
            </div>
            <img class="video-thumb-photo-img" src="/img/mask-thumb.jpg" alt="Wear a Mask">
          </figure>
        </a>
  
        <div class="video-text pl-md-5 pt-3 pt-lg-0">
          <h2 class="text-white mb-1 font-weight-bold">Wear a Mask</h2>
          Even without symptoms, you can expose others to COVID-19. Wear a mask to slow the spread.
          <a href="javascript:void(0);" data-video="1zDX9PXkotA" class="video-modal-open action-link mt-4 d-table px-3">Watch the Video</a>
        </div>
  
      </div>
    </div>
  </div>
  
  <!-- end video test -->
  {% include  langIncludeFolder + "find-services"  + langFilePostfix + ".html" %}

  <div class="container-fluid bg-primary text-white">
    <div class="container pb-3 pt-3 text-white">
        {% include  langIncludeFolder + "cali-working" + langFilePostfix + ".html" %} 
        </div>
      </div>
    </div>
  </div>
</div>

{% include "./news-feed-home.html" %}
</main>
{% include "footer.njk" %}

<!-- end video test -->
<div id="video-modal" class="video-modal">
  <div class="video-modal-content">
    <button class="video-modal-close modal_close">
      <svg class="video-modal-close-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640"><path d="M320 274.752l-226.272-226.272-45.248 45.248 226.272 226.272-226.272 226.272 45.248 45.248 226.272-226.272 226.272 226.272 45.248-45.248-226.272-226.272 226.272-226.272-45.248-45.248-226.272 226.272z"></path></svg>
    </button>
    <div class="video-modal-player" id="video-container"></div>
  </div>
</div>
<div class="popup_background"></div>
<script>/**
  * Video namespace
  */
 window.video = {
   modal:   document.getElementById('video-modal'), // The modal window container
   openers: document.getElementsByClassName("video-modal-open"), // Elements that will open the modal
   closers: document.getElementsByClassName("video-modal-close"), // Elements that will close the modal
   players: {}, // Cache each player's data in case the user closes and reopens it
   youtubeId: null, // The data-video attribute of the opener that was clicked
   youtubeStatus: "notLoaded" // One of: "notLoaded", "loading", "loaded"
 };
 
 /**
  * Fired by YouTube when the API is ready.
  */
 window.onYouTubeIframeAPIReady = function(){
   video.youtubeStatus = "loaded";
 };
 
 /**
  * Closes the modal and pauses the video. Videos will resume where they left off if the user opens the modal again.
  */
 video.closeModal = function(){
   var player = video.players[video.youtubeId];
 
   if(player && typeof player.pauseVideo === "function"){
      player.pauseVideo();
   }
 
   document.getElementsByTagName("HTML")[0].classList.remove("popup_visible");
   document.getElementById("video-"+video.youtubeId).style.display = "none";
   video.modal.style.display = "none";
   video.youtubeId = null;
 };
 
 /**
  * Initialize the YouTube API if it's not loaded, and wait.
  */
 video.initYouTube = function(){
   if(video.youtubeStatus === "notLoaded"){
     var tag = document.createElement('script');
     tag.src = "https://www.youtube.com/iframe_api";
 
     var firstScriptTag = document.getElementsByTagName('script')[0];
     firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
 
     video.youtubeStatus = "loading";
     video.waitForYouTube();
   }
 };
 
 /**
  * The user requested a video. Send them here to wait until YouTube tells us it has loaded.
  */
 video.waitForYouTube = function(){
   video.interval = setInterval(function(){
     if(video.youtubeStatus === "loaded"){
       clearInterval(video.interval);
       video.play();
     }
   }, 100);
 };
 
 /**
  * If the player exists, show it and play. Otherwise create a container and data structure for it and play.
  */
 video.play = function(){
   var playerId  = "video-"+video.youtubeId;
   var player    = document.getElementById(playerId);
   var container = document.getElementById("video-container");
 
   if(player){
     player.style.display = "block";
   } else {
     container.innerHTML += "<div id='" + playerId + "'></div>";
   }
 
   if(!video.players[video.youtubeId]){
     video.players[video.youtubeId] = new YT.Player(playerId, {
       host:    "https://www.youtube.com",
       height:  "390",
       width:   "640",
       videoId: video.youtubeId,
        events: {
         onReady: video.playerReady
       }
     });
   } else {
     player.style.display = "block";
     video.players[video.youtubeId].playVideo();
   }
 };
 
 /**
  * Play the video once it's ready
  */
 video.playerReady = function(e){
   e.target.playVideo();
 };
 
 /**
  * Any element with a .open-video-modal will open the modal.
  */
 for(i=0; i<video.openers.length; i++){
   video.openers[i].onclick = function(e){
     if(e.target.dataset.video){
       video.youtubeId = e.target.dataset.video;
     } else {
       video.youtubeId = e.target.closest("[data-video]").dataset.video;
     }
 console.log(video.youtubeId);
     if(video.youtubeId){
       switch(video.youtubeStatus){
         case "notLoaded":
           video.initYouTube();
           break;
 
         case "loading":
           video.waitForYouTube();
           break;
 
         case "loaded":
           video.play();
       }
 
       document.getElementsByTagName("HTML")[0].classList.add("popup_visible");
       video.modal.style.display = "block";
     }
   };
 }
 
 /**
  * Any element with a .video-close will close the modal.
  */
 for(i=0; i<video.closers.length; i++){
   video.closers[i].onclick = video.closeModal;
 }
 
 /**
  * Clicking outside the modal will close it.
  */
 window.onclick = function(e) {
   if(e.target == video.modal) {
     video.closeModal();
   }
 };
 
 /**
  * The escape key will close the video modal.
  */
 window.onkeydown = function(e){
   switch(e.keyCode){
     case 27: // Escape key
       if(document.getElementsByTagName("HTML")[0].classList.contains("popup_visible")){
         video.closeModal();
       }
       break;
   }
 };
 </script>
 <!-- end video test -->
</body>
</html>